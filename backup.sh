#!/bin/bash
set -euo pipefail

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ===
LOG_FILE="/opt/n8n-install/backups/debug.log"
exec > >(tee -a "$LOG_FILE") 2>&1
echo "üü° backup_n8n.sh –Ω–∞—á–∞–ª—Å—è: $(date '+%Y-%m-%d %H:%M:%S')"

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BACKUP_DIR="/opt/n8n-install/backups"
mkdir -p "$BACKUP_DIR"
NOW=$(date +"%Y-%m-%d_%H-%M-%S")
ARCHIVE_NAME="n8n-backup-$NOW.zip"
ARCHIVE_PATH="$BACKUP_DIR/$ARCHIVE_NAME"
TEMP_DIR=$(mktemp -d)
BASE_DIR="/opt/n8n-install"
ENV_FILE="$BASE_DIR/.env"

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===
check_dependencies() {
  for cmd in docker zip curl jq; do
    if ! command -v "$cmd" &>/dev/null; then
      echo "‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ $cmd –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      exit 1
    fi
  done
}

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_env() {
  if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE"
  else
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
  fi
}

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram ===
send_telegram() {
  local message="$1"
  local file="$2"
  
  if [ -z "$file" ]; then
    curl -s -X POST "https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage" \
      -d chat_id="$TG_USER_ID" \
      -d text="$message"
  else
    curl -s -X POST "https://api.telegram.org/bot$TG_BOT_TOKEN/sendDocument" \
      -F chat_id="$TG_USER_ID" \
      -F document=@"$file" \
      -F caption="$message"
  fi
}

# === –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ n8n ===
export_data() {
  local type=$1
  local output_file=$2
  
  echo "üîß –≠–∫—Å–ø–æ—Ä—Ç $type..."
  if docker exec n8n-app n8n export:$type --all --output="/tmp/n8n_$type.json"; then
    if docker cp "n8n-app:/tmp/n8n_$type.json" "$output_file"; then
      echo "‚úÖ $type —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"
      return 0
    fi
  fi
  
  echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å $type"
  return 1
}

# === –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ===
main() {
  check_dependencies
  load_env

  # –≠–∫—Å–ø–æ—Ä—Ç workflows
  if ! export_data "workflow" "$TEMP_DIR/workflows.json"; then
    send_telegram "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å workflows. –ë—ç–∫–∞–ø –ø—Ä–µ—Ä–≤–∞–Ω."
    exit 1
  fi

  # –≠–∫—Å–ø–æ—Ä—Ç credentials (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  if ! export_data "credentials" "$TEMP_DIR/credentials.json"; then
    echo "‚ö†Ô∏è –°–æ–∑–¥–∞—é –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª credentials"
    echo '{}' > "$TEMP_DIR/credentials.json"
  fi

  # –ë—ç–∫–∞–ø PostgreSQL
  echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ PostgreSQL..."
  if docker exec n8n-postgres pg_dump -U n8n -d n8n > "$TEMP_DIR/postgres.sql"; then
    echo "‚úÖ –î–∞–º–ø PostgreSQL —Å–æ–∑–¥–∞–Ω"
  else
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–º–ø PostgreSQL"
  fi

  # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
  echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞..."
  if zip -jrq "$ARCHIVE_PATH" "$TEMP_DIR"/*; then
    echo "‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: $ARCHIVE_PATH"
    send_telegram "‚úÖ –ë—ç–∫–∞–ø n8n —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω ($NOW)" "$ARCHIVE_PATH"
  else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞"
    send_telegram "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ –±—ç–∫–∞–ø–∞"
    exit 1
  fi

  # –û—á–∏—Å—Ç–∫–∞
  rm -rf "$TEMP_DIR"
  find "$BACKUP_DIR" -name "n8n-backup-*.zip" -mtime +7 -delete
  echo "üü¢ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: $(date '+%Y-%m-%d %H:%M:%S')"
}

main
