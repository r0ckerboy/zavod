services:
  traefik:
    image: traefik:${TRAEFIK_VERSION:-v2.11}
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./data/letsencrypt:/letsencrypt"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`${SUBDOMAIN_TRAEFIK:-traefik}.${BASE_DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
    networks:
      - web

  postgres:
    image: postgres:${POSTGRES_VERSION:-16-alpine}
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-main_db}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-main_db}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    command: redis-server --save 60 1 --loglevel warning --dir /data
    volumes:
      - ./data/redis:/data
    networks:
      - internal
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  n8n:
    build: ./n8n
    container_name: n8n
    restart: unless-stopped
    user: "1000:1000"
    command: sh -c "chown -R node:node /home/node/.n8n && /docker-entrypoint.sh"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-main_db}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-admin}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_HOST=${SUBDOMAIN_N8N:-n8n}.${BASE_DOMAIN}
      - WEBHOOK_URL=https://${SUBDOMAIN_N8N:-n8n}.${BASE_DOMAIN}/
      - GENERIC_TIMEZONE=${TZ:-Europe/Moscow}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    volumes:
      - ./data/n8n:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN_N8N:-n8n}.${BASE_DOMAIN}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    networks:
      - web
      - internal

  postiz:
    image: ghcr.io/gitroomhq/postiz-app:latest
    container_name: postiz
    restart: unless-stopped
    command: sh -c "npx prisma migrate deploy && node main.js"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-main_db}?schema=public
      - REDIS_URL=redis://redis:6379
      - MAIN_URL=https://${SUBDOMAIN_POSTIZ:-postiz}.${BASE_DOMAIN}
      - FRONTEND_URL=https://${SUBDOMAIN_POSTIZ:-postiz}.${BASE_DOMAIN}
      - NEXT_PUBLIC_BACKEND_URL=https://${SUBDOMAIN_POSTIZ:-postiz}.${BASE_DOMAIN}/api
      - JWT_SECRET=${N8N_ENCRYPTION_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - STORAGE_PROVIDER=local
      - UPLOAD_DIRECTORY=/uploads
      - NEXT_PUBLIC_UPLOAD_DIRECTORY=/uploads
      - IS_GENERAL="true"
      - DISABLE_REGISTRATION="false"
    volumes:
      - ./data/postiz-uploads:/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postiz.rule=Host(`${SUBDOMAIN_POSTIZ:-postiz}.${BASE_DOMAIN}`)"
      - "traefik.http.routers.postiz.entrypoints=websecure"
      - "traefik.http.routers.postiz.tls.certresolver=letsencrypt"
      - "traefik.http.services.postiz.loadbalancer.server.port=5000"
    networks:
      - web
      - internal

  short-video-maker:
    image: gyoridavid/short-video-maker:${SVM_VERSION:-latest-tiny}
    container_name: short-video-maker
    restart: unless-stopped
    user: "1000:1000"
    environment:
      - PEXELS_API_KEY=${PEXELS_API_KEY}
      - LANGUAGE=${SVM_LANGUAGE:-ru}
      - WHISPER_MODEL=${SVM_WHISPER_MODEL:-base}
      - voice=${SVM_VOICE:-baya}
    volumes:
      - ./data/videos:/app/data/videos
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.svm.rule=Host(`${SUBDOMAIN_SVM:-svm}.${BASE_DOMAIN}`)"
      - "traefik.http.routers.svm.entrypoints=websecure"
      - "traefik.http.routers.svm.tls.certresolver=letsencrypt"
      - "traefik.http.services.svm.loadbalancer.server.port=3123"
    networks:
      - web

  bot:
    build: ./bot
    container_name: bot
    restart: unless-stopped
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_USER_ID=${TELEGRAM_USER_ID}
      - DOCKER_SOCKET_PATH=/var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - internal

networks:
  web:
    driver: bridge
  internal:
    driver: bridge
